//
//  MHomeViewPage.m
//  MSeller
//
//  Created by TreeWrite on 2017/10/23.
//  Copyright © 2017年 TreeWrite. All rights reserved.
//

#import "MHomeViewPage.h"
#import "MHomeController.h"
#import "MHomeModel.h"
#import "MHomeHeadView.h"
#import "MHomeViewCell.h"
#import "MShareSDKManger.h"
#import "MRefreshHeader.h"
#import "MShareAlertView.h"
#import "MShareSDKManger.h"
#import "MDiyHudView.h"

@interface MHomeViewPage () <UITableViewDelegate, UITableViewDataSource, MHomeHeadViewDelegate, MHomeViewCellDelegate, MShareAlertViewDelegate>
{
    MHomeModel *_homeModel;
    NSMutableArray *_topBtnArray;
    UIView *_lineView;
    NSString *_cateid;
    MHomeHeadView *_headView;
}

@property (weak, nonatomic) IBOutlet NSLayoutConstraint *widthConstraint;
@property (weak, nonatomic) IBOutlet UIScrollView *topScrollView;
@property (weak, nonatomic) IBOutlet UIView *bottomView;
@property (weak, nonatomic) IBOutlet UITableView *homeTableView;

@end

@implementation MHomeViewPage

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewDidAppear:animated];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    if ([self respondsToSelector:@selector(setEdgesForExtendedLayout:)]) {
        self.edgesForExtendedLayout = UIRectEdgeNone;
    }
    
    [self setNavgationBar];
    [self initData];
    [self registCell];
    
    self.bottomView.hidden = YES;
    self.homeTableView.mj_header = [MRefreshHeader headerWithRefreshingTarget:self refreshingAction:@selector(requestRefresGetCateListData)];
    self.homeTableView.mj_footer = [MJRefreshAutoNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(requestGetCateListMoreData)];
    self.homeTableView.mj_footer.hidden = YES;
    
    [self requestGetCateData];
}

- (void)initData
{
    _cateid = @"";
    
    [self registController:@"MHomeController"];
    _homeModel = [self.controller getModelFromListByName:@"MHomeModel"];
    _topBtnArray = [[NSMutableArray alloc] initWithCapacity:0];
}

- (void)setNavgationBar
{
    self.title = mLocalizedString(@"mHome_Nav_Title");

    self.navigationController.navigationBar.barTintColor = MC_HomeNavBar_Color;
    [self.navigationController.navigationBar setTitleTextAttributes:@{NSForegroundColorAttributeName:MC_White_Color}];
    [self rightBarItemWithImage:mGetImage(@"nav_right_search") target:self action:@selector(rightBtnSearchAction)];
}

- (void)registCell
{
    [self.homeTableView registerNib:[UINib nibWithNibName:[MHomeViewCell getCellIdentifier] bundle:nil] forCellReuseIdentifier:[MHomeViewCell getCellIdentifier]];
}

/**
 导航栏右侧搜索按钮响应
 */
- (void)rightBtnSearchAction
{
    [self pushPageWithName:@"MGoodsDetailViewPage" animation:YES];

//    [self pushPageWithName:@"MSearchViewPage" animation:YES];
}

#pragma mark -
#pragma mark - 创建分类按钮
- (void)carteCateView
{
    CGFloat width = _homeModel.cateArray.count*(Screen_Width/4);
    self.widthConstraint.constant = width;
    
    _lineView = [[UIView alloc] initWithFrame:CGRectMake(0, mLayout_Ratio(40)-2, 50, 2)];
    _lineView.backgroundColor = MC_Orange_Color;
    [self.topScrollView addSubview:_lineView];
    self.topScrollView.bounces = NO;
    [self carteCateBtn:Screen_Width/4];
}

- (void)carteCateBtn:(CGFloat)width
{
    [_topBtnArray removeAllObjects];
    for (NSInteger i = 0; i < _homeModel.cateArray.count; i++) {
        MHomeCateData *cateData = [_homeModel.cateArray objectAtIndex:i];
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        button.frame = CGRectMake(width*i, 0, width, mLayout_Ratio(40));
        button.titleLabel.font = mSystemFont(15.f);
        [button setTitleColor:MC_DarkGray_Color forState:UIControlStateNormal];
        [button setTitleColor:MC_Orange_Color forState:UIControlStateSelected];
        [button setTitle:cateData.catename forState:UIControlStateNormal];
        if (i == 0) {
            button.selected = YES;
            [self setLineSizeWith:cateData.catename left:0];
        }
        [_topBtnArray addObject:button];
        [self.topScrollView addSubview:button];
        [button addTarget:self action:@selector(topBtnChangeAction:) forControlEvents:UIControlEventTouchUpInside];
    }
}

- (void)topBtnChangeAction:(UIButton *)btn
{
    if (btn.selected) {
        return;
    }else{
        for (UIButton *topBtn in _topBtnArray) {
            if (topBtn == btn) {
                topBtn.selected = YES;
                NSInteger index = [_topBtnArray indexOfObject:topBtn];
                MHomeCateData *cateData = [_homeModel.cateArray objectAtIndex:index];
                [self setLineSizeWith:cateData.catename left:Screen_Width/4*index];
                _cateid = [NSString stringWithFormat:@"%d", cateData.cateid];
                _headView.hidden = YES;
                [MDiyHudView showDiyHudWithTitleWith:nil superViewWith:self.view];
                [self requestRefresGetCateListData];
            }else{
                topBtn.selected = NO;
            }
        }
    }
}

- (void)setLineSizeWith:(NSString *)string left:(CGFloat)left
{
    CGSize titleSize = [MUtilities getSizeWithText:string textFontSize:mSystemFont(15.f) textHeight:40];
    if (titleSize.width > Screen_Width/4) {
        _lineView.width = Screen_Width/4;
    }else{
        _lineView.width = titleSize.width;
    }
    
    _lineView.left = left+(Screen_Width/4-_lineView.width)/2.f;

}


#pragma mark -
#pragma mark - 网络请求 
//请求分类
- (void)requestGetCateData
{
    [MDiyHudView showDiyHudWithTitleWith:nil superViewWith:self.view];
    [self.controller sendMessageID:mRequestGetCateTag messageInfo:nil];
}

//刷新分类下的列表
- (void)requestRefresGetCateListData
{
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];
    [dic setObject:_cateid forKey:@"cateid"];
    [dic setObject:@"1" forKey:@"pagenum"];
    [dic setObject:mRequestPageSize forKey:@"pagesize"];
    [self.controller sendMessageID:mRequestGetListTag messageInfo:dic];
}

//加载更多分类下的列表
- (void)requestGetCateListMoreData
{
    NSInteger pagenum = _homeModel.cateListArray.count/10+1;
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];
    [dic setObject:_cateid forKey:@"cateid"];
    [dic setObject:[NSString stringWithFormat:@"%ld", (long)pagenum] forKey:@"pagenum"];
    [dic setObject:mRequestPageSize forKey:@"pagesize"];
    [self.controller sendMessageID:mRequestGetListMoreTag messageInfo:dic];
}

//添加关注
- (void)requestAddLikeData:(MHomeCateListData *)data
{
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];
    [dic setObject:[NSString stringWithFormat:@"%d", data.spuid] forKey:@"spuid"];
    [self.controller sendMessageID:mRequestAddLikeTag messageInfo:dic];
}

//添加推荐
- (void)requestAddRecommData:(MHomeCateListData *)data
{
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithCapacity:0];
    [dic setObject:[NSString stringWithFormat:@"%d", data.spuid] forKey:@"spuid"];
    [self.controller sendMessageID:mRequestRecommTag messageInfo:dic];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/**
 设置状态栏颜色

 @return 颜色
 */
- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
    //    return UIStatusBarStyleDefault;
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

#pragma mark - 广告点击回调
#pragma mark - MHomeHeadViewDelegate

- (void)home_selectItemAtIndex:(NSInteger)index
{
    
}

#pragma mark -
#pragma mark -  UITableViewDelegate

//- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
//{
//    return 1;
//}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return _homeModel.cateListArray.count;
}

/*
- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, Screen_Width, mLayout_Ratio(10))];
    view.backgroundColor = MC_BGGray_Color;
    return view;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return mLayout_Ratio(10);
}
*/

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    MHomeCateListData *data = [_homeModel.cateListArray objectAtIndex:indexPath.row];
    return [MHomeViewCell getHomeCellHeight:data];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    MHomeCateListData *data = [_homeModel.cateListArray objectAtIndex:indexPath.row];
    MHomeViewCell *cell = [tableView dequeueReusableCellWithIdentifier:[MHomeViewCell getCellIdentifier]];
    cell.delegate = self;

    [cell updateHomeCellWith:data index:indexPath.row];
    
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:NO];
    MHomeCateListData *data = [_homeModel.cateListArray objectAtIndex:indexPath.row];
    [self pushPageWithName:@"MGoodsDetailViewPage" animation:YES withParams:@{@"spuid":[NSString stringWithFormat:@"%d", data.spuid]}];
}

#pragma mark -
#pragma mark - MHomeViewCellDelegate
- (void)home_cellSelectItemAtIndex:(NSInteger)index type:(HomeCell_Type)type
{
    if (_homeModel.cateListArray.count > index) {
        MHomeCateListData *data = [_homeModel.cateListArray objectAtIndex:index];
        if (type == HomeCell_Type_Share) {
            if (data.goodspicturelink && data.goodspicturelink.length > 0) {
                //分享
                MGoodsShareModel *model = [[MGoodsShareModel alloc] init];
                model.shareProfit = [NSString stringWithFormat:@"%0.2f", data.goodsprofit];
                model.shareUrl = STR_IS_NULL(data.goodspicturelink);
                [MShareAlertView showShareAlertViewWith:MAppDelegateObj.window delegate:self data:model];
            }
        }else if (type == HomeCell_Type_Add){
            //添加推荐
            [self requestAddRecommData:data];
        }else{
            //关注
            [self requestAddLikeData:data];

        }
    }
}

#pragma mark - 点击分享回调
#pragma mark - MShareAlertViewDelegate

/**
 分享按钮响应回调
 
 @param type 类型
 */
- (void)share_selectedWithType:(Share_Selected_Type)type data:(MGoodsShareModel *)shareData
{
    [[MShareSDKManger sharedMShareSDKManger] shareActionType:type vc:self data:shareData];
}

#pragma mark -
#pragma mark - 请求返回解析后响应
- (void)update:(id)data msgID:(int)msgid faildCode:(EDataStatusCode)errCode
{
    [MDiyHudView removeHudWith:self.view];
    [MPromptView remove_promptAlertViewWith:self.view];
    [MPromptView remove_promptAlertViewWith:self.homeTableView];
    [self.homeTableView.mj_header endRefreshing];
    [self.homeTableView.mj_footer endRefreshing];
    
    switch (errCode) {
        case eDataCodeSuccess:
        {
            if (msgid == mRequestGetCateTag) {
                self.bottomView.hidden = NO;

                [self carteCateView];
                
                _headView = [[MHomeHeadView alloc] init];
                _headView.delegate = self;
                MHomeCateData *cateData = [_homeModel.cateArray objectAtIndex:0];
                [_headView updateViewWithArray:cateData.bannerArray];
                self.homeTableView.tableHeaderView = _headView;
                _headView.hidden = YES;

                _cateid = [NSString stringWithFormat:@"%d", cateData.cateid];
                [self requestRefresGetCateListData];
                
            }else if (msgid == mRequestGetListTag){
                
                if (_homeModel.cateListArray.count == 0) {
                    self.homeTableView.mj_footer.hidden = YES;
                    _headView.hidden = YES;
                    [MPromptView show_promptAlertViewWith:self.homeTableView typeWith:M_PromptAlert_Type_Failure messageWith:mLocalizedString(@"mGoods_Home_CateList_Null")];
                }else {
                    _headView.hidden = NO;

                    if (_homeModel.cateListArray.count%[mRequestPageSize intValue] > 0 ) {
                        self.homeTableView.mj_footer.hidden = YES;
                    }else if (_homeModel.cateListArray.count%[mRequestPageSize intValue] == 0 ){
                        self.homeTableView.mj_footer.hidden = NO;
                    }
                }
                
                [self.homeTableView reloadData];
                
            }else if (msgid == mRequestGetListMoreTag){
                
                if (_homeModel.cateListArray.count%[mRequestPageSize intValue] > 0 ) {
                    self.homeTableView.mj_footer.hidden = YES;
                }else if (_homeModel.cateListArray.count%[mRequestPageSize intValue] == 0 ){
                    self.homeTableView.mj_footer.hidden = NO;
                }
                
                [self.homeTableView reloadData];
                
            }else if (msgid == mRequestRecommTag){
                [self.view m_makeToast:mLocalizedString(@"mAlert_Goods_Recomm_Success")];
                [self.homeTableView reloadData];
            }else if (msgid == mRequestAddLikeTag){
                [self.view m_makeToast:mLocalizedString(@"mAlert_Goods_Like_Success")];
                [self.homeTableView reloadData];
            }
        }
            break;
        case eDataCodeServiceFaild:
        {
            if (msgid == mRequestGetCateTag) {
                if (_homeModel.cateListArray.count == 0) {
                    self.homeTableView.mj_footer.hidden = YES;
                }
                [MPromptView show_promptAlertViewWith:self.view typeWith:M_PromptAlert_Type_Failure messageWith:mLocalizedString(@"mPublic_Sever_Error") blockWith:^{
                    [MPromptView remove_promptAlertViewWith:self.view];
                    [self requestGetCateData];
                }];
            }else if (msgid == mRequestGetListTag) {
                [MPromptView show_promptAlertViewWith:self.homeTableView typeWith:M_PromptAlert_Type_Failure messageWith:mLocalizedString(@"mPublic_Sever_Error") blockWith:^{
                    [MPromptView remove_promptAlertViewWith:self.homeTableView];
                    [MDiyHudView showDiyHudWithTitleWith:nil superViewWith:self.view];
                    [self requestRefresGetCateListData];
                }];
            }else{
                [self.view m_makeToast:[MUtilities toastResponseMessage:data]];
            }
        }
            break;
        case eDataCodeFaild:
        {
            if (msgid == mRequestGetCateTag) {
                if (_homeModel.cateListArray.count == 0) {
                    self.homeTableView.mj_footer.hidden = YES;
                }
                [MPromptView show_promptAlertViewWith:self.view typeWith:M_PromptAlert_Type_Failure messageWith:mLocalizedString(@"mAlert_Request_Error") blockWith:^{
                    [MPromptView remove_promptAlertViewWith:self.view];
                    [self requestGetCateData];
                }];
            }else if (msgid == mRequestGetListTag){
                [MPromptView show_promptAlertViewWith:self.homeTableView typeWith:M_PromptAlert_Type_Failure messageWith:mLocalizedString(@"mAlert_Request_Error") blockWith:^{
                    [MPromptView remove_promptAlertViewWith:self.homeTableView];
                    [MDiyHudView showDiyHudWithTitleWith:nil superViewWith:self.view];
                    [self requestRefresGetCateListData];
                }];
            }else{
                [self.view m_makeToast:mLocalizedString(@"mAlert_Request_Error")];
            }
        }
            break;
        default:
            break;
    }
}

@end
